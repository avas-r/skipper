"""
Notification model for the notification system.

This module defines the NotificationType, NotificationChannel, NotificationRule,
and Notification models for managing the notification system.
"""

import uuid
from datetime import datetime

from sqlalchemy import Column, String, DateTime, Text, JSON, ForeignKey, UniqueConstraint
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import UUID

from ..db.session import Base

class NotificationType(Base):
    """
    Notification type model.
    
    Defines the types of notifications that can be generated by the system,
    such as job failures, agent status changes, etc.
    """
    
    __tablename__ = "notification_types"
    
    # Primary key
    type_id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    
    # Notification type information
    name = Column(String(100), nullable=False, unique=True)
    description = Column(Text, nullable=True)
    
    # Audit fields
    created_at = Column(DateTime, nullable=False, default=func.now())
    
    # Relationships
    rules = relationship("NotificationRule", back_populates="notification_type")
    
    def __repr__(self):
        """String representation of the notification type"""
        return f"<NotificationType {self.name} ({self.type_id})>"

class NotificationChannel(Base):
    """
    Notification channel model.
    
    Defines channels through which notifications can be sent,
    such as email, Slack, webhooks, etc.
    """
    
    __tablename__ = "notification_channels"
    
    # Primary key
    channel_id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    
    # Tenant foreign key
    tenant_id = Column(UUID(as_uuid=True), ForeignKey("tenants.tenant_id"), nullable=False)
    tenant = relationship("Tenant", backref="notification_channels")
    
    # Channel information
    name = Column(String(100), nullable=False)
    type = Column(String(50), nullable=False)  # "email", "slack", "webhook", etc.
    
    # Channel configuration
    configuration = Column(JSON, nullable=False)
    
    # Status
    status = Column(String(20), nullable=False, default="active")
    
    # Audit fields
    created_at = Column(DateTime, nullable=False, default=func.now())
    updated_at = Column(DateTime, nullable=False, default=func.now(), onupdate=func.now())
    created_by = Column(UUID(as_uuid=True), ForeignKey("users.user_id"), nullable=True)
    
    # Relationships
    creator = relationship("User", foreign_keys=[created_by])
    rules = relationship("NotificationRule", back_populates="channel")
    
    # Unique constraint for tenant + name
    __table_args__ = (
        UniqueConstraint("tenant_id", "name", name="uq_channel_tenant_name"),
    )
    
    def __repr__(self):
        """String representation of the notification channel"""
        return f"<NotificationChannel {self.name} ({self.channel_id})>"

class NotificationRule(Base):
    """
    Notification rule model.
    
    Rules define when notifications should be sent based on events and conditions.
    """
    
    __tablename__ = "notification_rules"
    
    # Primary key
    rule_id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    
    # Tenant foreign key
    tenant_id = Column(UUID(as_uuid=True), ForeignKey("tenants.tenant_id"), nullable=False)
    tenant = relationship("Tenant", backref="notification_rules")
    
    # Rule information
    name = Column(String(255), nullable=False)
    
    # Notification type foreign key
    notification_type_id = Column(UUID(as_uuid=True), ForeignKey("notification_types.type_id"), nullable=False)
    notification_type = relationship("NotificationType", back_populates="rules")
    
    # Notification channel foreign key
    channel_id = Column(UUID(as_uuid=True), ForeignKey("notification_channels.channel_id"), nullable=False)
    channel = relationship("NotificationChannel", back_populates="rules")
    
    # Rule conditions
    conditions = Column(JSON, nullable=False)
    
    # Status
    status = Column(String(20), nullable=False, default="active")
    
    # Audit fields
    created_at = Column(DateTime, nullable=False, default=func.now())
    updated_at = Column(DateTime, nullable=False, default=func.now(), onupdate=func.now())
    created_by = Column(UUID(as_uuid=True), ForeignKey("users.user_id"), nullable=True)
    
    # Relationships
    creator = relationship("User", foreign_keys=[created_by])
    notifications = relationship("Notification", back_populates="rule")
    
    # Unique constraint for tenant + name
    __table_args__ = (
        UniqueConstraint("tenant_id", "name", name="uq_rule_tenant_name"),
    )
    
    def __repr__(self):
        """String representation of the notification rule"""
        return f"<NotificationRule {self.name} ({self.rule_id})>"

class Notification(Base):
    """
    Notification model.
    
    Notifications are messages generated by the system according to rules
    and sent to users via channels.
    """
    
    __tablename__ = "notifications"
    
    # Primary key
    notification_id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    
    # Tenant foreign key
    tenant_id = Column(UUID(as_uuid=True), ForeignKey("tenants.tenant_id"), nullable=False)
    tenant = relationship("Tenant", backref="notifications")
    
    # Notification rule foreign key
    rule_id = Column(UUID(as_uuid=True), ForeignKey("notification_rules.rule_id"), nullable=False)
    rule = relationship("NotificationRule", back_populates="notifications")
    
    # Notification content
    subject = Column(String(255), nullable=False)
    message = Column(Text, nullable=False)
    
    # Notification status
    status = Column(String(20), nullable=False, default="pending")
    
    # Reference to the entity that triggered the notification
    reference_id = Column(UUID(as_uuid=True), nullable=True)
    reference_type = Column(String(50), nullable=True)
    
    # Additional metadata
    info = Column("metadata", JSON, nullable=True)
    
    # Audit fields
    created_at = Column(DateTime, nullable=False, default=func.now())
    sent_at = Column(DateTime, nullable=True)
    
    def __repr__(self):
        """String representation of the notification"""
        return f"<Notification {self.notification_id} - {self.status}>"
version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:14
    container_name: orchestrator-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orchestrator
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - orchestrator-network

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3.9-management
    container_name: orchestrator-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - orchestrator-network

  # MinIO object storage
  minio:
    image: minio/minio
    container_name: orchestrator-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - orchestrator-network

  # Redis cache (optional but recommended)
  redis:
    image: redis:6.2
    container_name: orchestrator-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - orchestrator-network

  # API server
  api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: orchestrator-api
    environment:
      ENVIRONMENT: development
      DEBUG: "True"
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orchestrator
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_SECURE: "False"
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../:/app
      - api_uploads:/app/uploads
      - api_packages:/app/packages
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - orchestrator-network

  # Worker processes (can be scaled)
  worker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: orchestrator-worker
    environment:
      ENVIRONMENT: development
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orchestrator
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_SECURE: "False"
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../:/app
      - api_uploads:/app/uploads
      - api_packages:/app/packages
    command: python -m app.workers.run_workers
    networks:
      - orchestrator-network

  # Flower (RabbitMQ monitoring)
  flower:
    image: mher/flower
    container_name: orchestrator-flower
    environment:
      FLOWER_BROKER: amqp://guest:guest@rabbitmq:5672//
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq
    networks:
      - orchestrator-network

networks:
  orchestrator-network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  minio_data:
  redis_data:
  api_uploads:
  api_packages: